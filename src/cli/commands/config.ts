import chalk from 'chalk';
import inquirer from 'inquirer';
import { ConfigService } from '../../services/ConfigService.js';
import { Config } from '../../types/index.js';
import * as path from 'path';
import * as os from 'os';

interface ConfigOptions {
  set?: string[];
  get?: string;
  show?: boolean;
  init?: boolean;
}

export async function configCommand(options: ConfigOptions) {
  const configService = new ConfigService();

  if (options.init) {
    await initializeConfig(configService);
    return;
  }

  if (options.show) {
    const config = await configService.load();
    console.log(chalk.bold('\nCurrent Configuration:\n'));
    console.log(JSON.stringify(config, null, 2));
    return;
  }

  if (options.get) {
    const config = await configService.load();
    const value = getNestedValue(config, options.get);
    if (value !== undefined) {
      console.log(chalk.green(`${options.get}:`), value);
    } else {
      console.log(chalk.red(`Configuration key not found: ${options.get}`));
    }
    return;
  }

  if (options.set && options.set.length === 2) {
    const [key, value] = options.set;
    const config = await configService.load();
    setNestedValue(config, key, value);
    await configService.save(config);
    console.log(chalk.green(`âœ“ Set ${key} = ${value}`));
    return;
  }

  console.log(chalk.yellow('Use --help to see available config commands'));
}

async function initializeConfig(configService: ConfigService) {
  console.log(chalk.bold('\nðŸŽ¯ Polish Configuration Setup\n'));

  const answers = await inquirer.prompt([
    {
      type: 'input',
      name: 'vaultPath',
      message: 'Obsidian vault path:',
      default: path.join(os.homedir(), 'ObsidianVault'),
      validate: (input: string) => input.length > 0 || 'Vault path is required',
    },
    {
      type: 'input',
      name: 'originalsPath',
      message: 'Original files organization path:',
      default: path.join(os.homedir(), 'OrganizedFiles'),
    },
    {
      type: 'checkbox',
      name: 'sources',
      message: 'Select default source folders to monitor:',
      choices: [
        { name: 'Desktop', value: path.join(os.homedir(), 'Desktop') },
        { name: 'Downloads', value: path.join(os.homedir(), 'Downloads') },
        { name: 'Documents', value: path.join(os.homedir(), 'Documents') },
      ],
    },
    {
      type: 'list',
      name: 'organizationStyle',
      message: 'How should original files be organized?',
      choices: [
        { name: 'By file type', value: 'type-based' },
        { name: 'By project/context', value: 'project-based' },
        { name: 'By date', value: 'date-based' },
      ],
    },
    {
      type: 'list',
      name: 'mode',
      message: 'Default processing mode:',
      choices: [
        { name: 'Claude Code (no API key needed)', value: 'claude-code' },
        { name: 'Claude API (requires API key)', value: 'api' },
        { name: 'Hybrid (API with local fallback)', value: 'hybrid' },
        { name: 'Local only (no AI)', value: 'local' },
      ],
    },
  ]);

  let apiKey: string | undefined;
  if (answers.mode === 'api' || answers.mode === 'hybrid') {
    const apiAnswer = await inquirer.prompt([
      {
        type: 'password',
        name: 'apiKey',
        message: 'Anthropic API key:',
        validate: (input: string) => input.length > 0 || 'API key is required for API mode',
      },
    ]);
    apiKey = apiAnswer.apiKey;
  }

  const config: Config = {
    vault: {
      path: answers.vaultPath,
      structure: {
        documents: 'Documents',
        media: 'Media',
        code: 'Code',
        references: 'References',
      },
    },
    originals: {
      path: answers.originalsPath,
      organizationStyle: answers.organizationStyle,
      createYearFolders: true,
    },
    sources: answers.sources.map((src: string) => ({
      path: src,
      includeSubfolders: false,
    })),
    processing: {
      extractText: true,
      maxFileSize: '50MB',
      supportedFormats: ['pdf', 'docx', 'txt', 'md', 'png', 'jpg', 'py', 'js'],
    },
    tagging: {
      maxTags: 10,
      autoGenerateTypeTags: true,
      autoGenerateDateTags: true,
      customTagPatterns: {},
    },
    api: {
      mode: answers.mode,
      apiKey: apiKey || 'env:ANTHROPIC_API_KEY',
      model: 'claude-3-opus-20240229',
      maxTokens: 4096,
      temperature: 0.3,
    },
  };

  await configService.save(config);
  console.log(chalk.green('\nâœ“ Configuration saved successfully!'));
  console.log(chalk.gray('You can now run'), chalk.cyan('polish organize'), chalk.gray('to start organizing files'));
}

function getNestedValue(obj: any, path: string): any {
  return path.split('.').reduce((curr, key) => curr?.[key], obj);
}

function setNestedValue(obj: any, path: string, value: any): void {
  const keys = path.split('.');
  const lastKey = keys.pop()!;
  const target = keys.reduce((curr, key) => {
    if (!curr[key]) curr[key] = {};
    return curr[key];
  }, obj);
  
  target[lastKey] = value.toLowerCase() === 'true' ? true :
                     value.toLowerCase() === 'false' ? false :
                     isNaN(Number(value)) ? value : Number(value);
}