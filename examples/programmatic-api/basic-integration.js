#!/usr/bin/env node

/**
 * Basic Polish integration example
 * Demonstrates programmatic file organization
 */

import { Polish, ProfileManager } from 'polish-cli';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function basicExample() {
  console.log('üîÑ Basic Polish Integration Example\n');

  try {
    // Method 1: Use existing profile
    console.log('Method 1: Using existing profile...');
    const polish = new Polish(undefined, 'default');
    await polish.loadConfig();

    // Organize sample files
    const sampleDir = path.join(__dirname, '../sample-files');
    const result = await polish.organize({
      sources: [sampleDir],
      dryRun: true, // Safe preview mode
      onProgress: (current, total, file) => {
        console.log(`  Processing ${file.name} (${current}/${total})`);
      }
    });

    console.log(`‚úì Processed ${result.summary.successful} files`);
    console.log(`‚úó Failed ${result.summary.failed} files\n`);

  } catch (error) {
    console.error('‚ùå Basic example failed:', error.message);
  }
}

async function customConfigExample() {
  console.log('Method 2: Using custom configuration...');

  try {
    // Method 2: Custom configuration
    const customPolish = new Polish({
      vault: {
        path: path.join(__dirname, '../output/vault'),
        structure: {
          documents: 'Documents',
          media: 'Media', 
          code: 'Code',
          references: 'References'
        }
      },
      originals: {
        path: path.join(__dirname, '../output/organized'),
        organizationStyle: 'type-based',
        createYearFolders: true
      },
      sources: [
        {
          path: path.join(__dirname, '../sample-files'),
          includeSubfolders: true
        }
      ],
      processing: {
        extractText: true,
        maxFileSize: '10MB',
        supportedFormats: ['txt', 'md', 'js', 'json', 'png']
      },
      tagging: {
        maxTags: 8,
        autoGenerateTypeTags: true,
        autoGenerateDateTags: true,
        customTagPatterns: {
          project: 'extract from filename',
          priority: 'high|medium|low'
        }
      },
      api: {
        mode: 'local' // No external API calls
      }
    });

    const result = await customPolish.organize({
      dryRun: false, // Actually organize files
      copy: true,    // Keep originals
    });

    console.log(`‚úì Successfully organized ${result.summary.successful} files`);
    console.log(`‚è±Ô∏è Completed in ${result.summary.duration}ms\n`);

    // Show some results
    result.processed.slice(0, 3).forEach(file => {
      console.log(`üìÑ ${file.original.name}`);
      console.log(`   ‚Üí Vault: ${path.basename(file.markdownPath)}`);
      console.log(`   ‚Üí Tags: ${file.tags.slice(0, 3).join(', ')}`);
      console.log(`   ‚Üí Original: ${path.basename(file.originalNewPath)}\n`);
    });

  } catch (error) {
    console.error('‚ùå Custom config example failed:', error.message);
  }
}

async function profileManagementExample() {
  console.log('Method 3: Profile management...');

  try {
    const profileManager = new ProfileManager();
    await profileManager.initialize();

    // List existing profiles
    const profiles = await profileManager.listProfiles();
    console.log(`üìã Found ${profiles.length} profiles:`);
    profiles.forEach(profile => {
      const active = profile.isActive ? '‚óè' : '‚óã';
      console.log(`   ${active} ${profile.name} - ${profile.description || 'No description'}`);
    });

    // Get active configuration
    const activeConfig = await profileManager.getActiveConfig();
    console.log(`\nüéØ Active vault: ${activeConfig.vault.path}`);
    console.log(`üìÅ Organization: ${activeConfig.originals.organizationStyle}`);
    console.log(`‚öôÔ∏è Mode: ${activeConfig.api.mode}\n`);

  } catch (error) {
    console.error('‚ùå Profile management failed:', error.message);
  }
}

async function batchProcessingExample() {
  console.log('Method 4: Batch processing with error handling...');

  try {
    const polish = new Polish();
    await polish.loadConfig();

    // Simulate batch processing multiple directories
    const directories = [
      path.join(__dirname, '../sample-files'),
      path.join(__dirname, '../more-files'),
      path.join(__dirname, '../project-files')
    ];

    for (const dir of directories) {
      console.log(`\nüìÇ Processing directory: ${path.basename(dir)}`);
      
      try {
        const result = await polish.organize({
          sources: [dir],
          dryRun: true,
          onProgress: (current, total, file) => {
            process.stdout.write(`\r   Progress: ${current}/${total} - ${file.name}`);
          }
        });

        console.log(`\n   ‚úì Success: ${result.summary.successful} files`);
        
        if (result.summary.failed > 0) {
          console.log(`   ‚ö†Ô∏è Failed: ${result.summary.failed} files`);
          result.failed.forEach(failure => {
            console.log(`      - ${failure.file.name}: ${failure.error}`);
          });
        }

      } catch (dirError) {
        console.log(`\n   ‚ùå Directory failed: ${dirError.message}`);
      }
    }

  } catch (error) {
    console.error('‚ùå Batch processing failed:', error.message);
  }
}

// Run all examples
async function runExamples() {
  console.log('üöÄ Polish Programmatic API Examples\n');
  console.log('='.repeat(50) + '\n');

  await basicExample();
  await customConfigExample(); 
  await profileManagementExample();
  await batchProcessingExample();

  console.log('‚úÖ All examples completed!\n');
}

// Execute if run directly
if (import.meta.url === `file://${process.argv[1]}`) {
  runExamples().catch(console.error);
}

export {
  basicExample,
  customConfigExample,
  profileManagementExample,
  batchProcessingExample
};